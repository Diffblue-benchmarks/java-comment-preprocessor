Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Java Comment Preprocessor<br/>v 7\.0\.0

## Maven

### goals

#### preprocess

##### sources

###### Source root folders for preprocessing,<br/>if it is empty then project provided folders will be used\.

####### \<sources\><br/>  \<src\>$\{basedir\}/src\</src\><br/>  \<src\>$\{basedir\}/res\</src\><br/>\</sources\>
> align=`left`


##### eol

###### End of line string to be used in reprocessed results\.<br/>It supports java escaping chars\.

####### $\{line\.separator\}

######## \<eol\>\\r\\n\</eol\>

##### keepAttributes

###### Keep attributes for preprocessing file<br/>and copy them to result one\.

####### false

######## \<keepAttributes\>true\</keepAttributes\>

##### target

######  Target folder to place preprocessing result<br/>in regular source processing phase\.

####### \<target\>$\{project\.build\.directory\}/generated\-sources/preprocessed\</target\>

##### targetTest

###### Target folder to place preprocessing result<br/>in test source processing phase\.

####### \<targetTest\>$\{project\.build\.directory\}/generated\-test\-sources/preprocessed\</targetTest\>

##### sourceEncoding

###### Encoding for text read operations\.

####### UTF\-8

######## \<sourceEncoding\>US\-ASCII\</sourceEncoding\>

##### targetEncoding

###### Encoding for text write operations\.

####### UTF\-8

######## \<targetEncoding\>US\-ASCII\</targetEncoding\>

##### ignoreMissingSources

###### Flag to ignore missing source folders,<br/>if false then mojo fail for any missing source folder,<br/>if true then missing folder will be ignored\.

####### false

######## \<ignoreMissingSources\>true\</ignoreMissingSources\>

##### excludeExtensions

###### List of file extensions to be excluded from preprocessing\.

####### xml

######## \<excludeExtensions\><br/>  \<ext\>png\</ext\><br/>  \<ext\>xml\</ext\><br/>  \<ext\>txt\</ext\><br/>\</excludeExtensions\>
> align=`left`


##### extensions

######  List of file extensions to be included into preprocessing\.

####### java, txt, htm, html

######## \<extensions\><br/>  \<ext\>cpp\</ext\><br/>  \<ext\>frt\</ext\><br/>\</extensions\>
> align=`left`


##### unknownVarAsFalse

######  Recognize a unknown variable as containing boolean FALSE flag\.

####### false

######## \<unknownVarAsFalse\>true\</unknownVarAsFalse\>

##### dryRun

###### Dry run, making preprocessing but without output

####### false

######## \<dryRun\>true\</dryRun\>

##### verbose

###### Verbose mode

####### false

######## \<verbose\>true\</verbose\>

##### clearTarget

###### Clear target folder if it exists\.

####### false

######## \<clearTarget\>true\</clearTarget\>

##### baseDir

###### Set base directory which will be used for relative source paths\.

####### $\{project\.basedir\}

######## \<baseDir\>$\{project\.basedir\}/src\</baseDir\>

##### careForLastEol

###### Carefully reproduce last EOL in result files\.

####### false

######## \<careForLastEol\>true\</careForLastEol\>

##### replaceSources

###### Replace source root folders in maven project<br/>after preprocessing for following processing\.

####### true

######## \<replaceSources\>false\</replaceSources\>

##### keepComments

###### Keep comments in result files\.

####### true

######## \<keepComments\>false\</keepComments\>

##### vars

###### List of variables to be registered<br/>in preprocessor as global ones\.

####### \<vars\><br/>    \<glob\_var1\>SOME TEXT\</glob\_var1\><br/>    \<glob\_var2\>12345\</glob\_var2\><br/>\</vars\>
> align=`left`


##### excludeFolders

###### List of patterns of folder paths to be excluded from preprocessing,<br/>It uses ANT path pattern format\.

####### \<excludeFolders\><br/>   \<folder\>\*\*/folder1\</folder\><br/>   \<folder\>/some/\*\*/folder2\</folder\><br/>\</excludeFolder\>
> align=`left`


##### configFiles

###### List of external files containing variable definitions\.

####### \<configFiles\><br/>  \<file\>$\{basedir\}/config1\.txt\</file\><br/>  \<file\>$\{basedir\}/config2\.txt\</file\><br/>\</configFiles\>
> align=`left`


##### keepLines

###### Keep preprocessing directives in result files as commented ones,<br/>it is useful to not break line numeration in result files\.

####### true

######## \<keepLines\>false\</keepLines\>

##### allowWhitespaces

###### Turn on support of white spaces<br/>in preprocessor directives between '//' and the '\#'\.

####### false

######## \<allowWhitespaces\>true\</allowWhitespaces\>

##### preserveIndents

###### Preserve indents in lines marked by '//$' and '//$$' directives\.<br/>Directives will be replaced by white spaces chars\.

####### false

######## \<preserveIndents\>true\</preserveIndents\>

##### useTestSources

###### Turn on test sources root use\.

####### false

######## \<useTestSources\>true\</useTestSources\>

##### skip

###### Skip preprocessing\.

####### false

######## \<skip\>true\</skip\>

####### activated by

######## jcp\.preprocess\.skip

##### dontOverwriteSameContent

###### Turn on check of content body compare with existing result file to prevent overwriting,<br/>if content is the same then preprocessor will not be writing new result content\.

####### false

######## \<dontOverwriteSameContent\>true\</dontOverwriteSameContent\>

## ANT

## Gradle

### plug\-in

#### com\.igormaznitsa\.jcp

##### task

###### preprocess

##### extension

###### preprocessSettings

####### sources

######## sources = \['src/main/java'\]

####### eol

######## eol = '\\r\\n'

####### keepAttributes

######## keepAttributes=true

####### target

######## target = file\('build/preprocessed/java'\)

####### sourceEncoding

######## sourceEncoding='UTF\-8'

####### targetEncoding

######## targetEncoding='UTF\-8'

####### ignoreMissingSources

######## ignoreMissingSources=false

####### excludeExtensions

######## excludeExtensions=\['txt','xml'\]

####### extensions

######## extensions=\['java'\]

####### unknownVarAsFalse

######## unknownVarAsFalse=false

####### dryRun

######## dryRun=false

####### verbose

######## verbose=true

####### clearTarget

######## clearTarget=true

####### baseDir

######## baseDir = file\('build/someBase'\)

####### careForLastEol

######## careForLastEol=true

####### keepComments

######## keepComments=true

####### vars

######## vars = \['someVar': 'Some Test Value'\]

####### excludeFolders

######## excludeFolders=\['\*\*/some1','\*\*/some2'\]

####### configFiles

######## configFiles=\['\./configFile\.txt'\]

####### keepLines

######## keepLines=true

####### allowWhitespaces

######## allowWhitespaces=true

####### preserveIndents

######## preserveIndents=true

####### skip

######## skip=true

####### dontOverwriteSameContent

######## dontOverwriteSameContent=false

## External config files

### multi\-line text files

#### line starts with

##### /

###### can contain CLi key

####### /V

##### \#
> leftSide=`true`


###### recognized as comment

####### \# some ignored comment

##### @

###### throws preprocessor error

####### @ error string

##### any other non\-empty

###### interpret as global variable definition

####### \<VAR NAME\>=\<EXPRESSION\>

######## globalVar="Hello world"

#### empty line

##### ignored

## Command Line
> leftSide=`true`


### /H,/h,/?,\-H\.\-?

#### print help information

### /T:
> leftSide=`true`


#### set input encoding

##### /T:UTF\-8

### /TT:

#### set output encoding

##### /TT:UTF\-8

### /C
> leftSide=`true`


#### clear target folder before preprocessing

### /I:
> leftSide=`true`


#### define source folder for preprocessing

##### /I:\./src

### /O:
> leftSide=`true`


#### define result folder

##### /O:\./preprocess

### /F:
> leftSide=`true`


#### comma separated list of preprocessed extensions

##### /F:java,txt,html

### /EF:
> leftSide=`true`


#### comma separated list of excluded extensions

##### /EF:xml,png

### /ES
> leftSide=`true`


#### turn on support of white spaces betwee // and \# in directives

### /R
> leftSide=`true`


#### remove all Java like comments from result files

### /K
> leftSide=`true`


#### prevent line numeration in result files

### /Z
> leftSide=`true`


#### disable override result file if exists and has same content

### /V
> leftSide=`true`


#### turn on verbose mode

### @\<file\_name\>
> leftSide=`true`


#### read global variables from a file

### @@\<expression\>
> leftSide=`true`


#### read global variables from file which path defined by expression

### /P:
> leftSide=`true`


#### define global variable value

##### /P:DEBUG=true

### /N
> leftSide=`true`


#### carefully reproduce last EOL in result file

### /PI
> leftSide=`true`


#### turn on indent preserving for //$ and //$$ directives

### /ED:
> leftSide=`true`


#### folders to be excluded from preprocessing<br/>ANT matcher is allowed, system path separator as delimiter

##### /ED:/\*\*/test:/\*\*/test\*/some

### /A
> leftSide=`true`


#### keep original source attributes for result files

### /U
> leftSide=`true`


#### turn on FALSE as unknown variable value

## DSL
> leftSide=`true`


### Directives

#### //\#local \<var name\>=\<expression\>

##### define local variable

###### //\#local somevar="Hello world"

#### //\#if \<bool expression\>\.\.//\#else\.\.//\#endif

##### conditional execution<br/>needs boolean expression

###### //\#if boovar<br/>\.\.\.<br/>//\#else<br/>\.\.\.<br/>//\#endif
> align=`left`


#### //\#ifdefined \<variable name\>\.\.\.//\#else\.\.//\#endif
> leftSide=`true`


##### conditional execution<br/>checks that a variable is defined

###### //\#ifdefined <br/>\.\.\.<br/>//\#else<br/>\.\.\.<br/>//\#endif
> align=`left`


##### //\#ifdef\.\.\.//\#else\.\.\.//\#endif

#### //\#ifndef \<variable name\>\.\.//\#else\.\.//\#endif
> leftSide=`true`


##### conditional execution<br/>checks that a variable is not defined

###### //\#ifndef  svar<br/>\.\.\.<br/>//\#else<br/>\.\.\.<br/>//\#endif
> align=`left`


#### //\#while \<bool expression\>\.\.//\#break\.\.//\#continue\.\.//\#end
> leftSide=`true`


##### conditional execution<br/>while expression result is TRUE

###### //\#while a\>0<br/>\.\.\.<br/>//\#break<br/>\.\.\.<br/>//\#continue<br/>\.\.\.<br/>//\#end
> align=`left`


#### //\#exitif \<bool expression\>
> leftSide=`true`


##### conditional end of current file preprocessing<br/>return to calling file if presented

###### //\#exitif avar="hello"

#### //\#exit
> leftSide=`true`


##### end of current file preprocessing<br/>return to calling file if presented

#### //\#outdir \<str expression\>
> leftSide=`true`


##### set output directory for preprocessing file

###### //\#outdir "some/folder"

#### //\#\[\+|\-\]
> leftSide=`true`


##### turn on \(\+\) and turn off \(\-\) preprocessing

###### preprocessed<br/>//\#\-<br/>non preprocessed<br/>//\#\+<br/>preprocessed
> align=`left`


#### //\#outname \<str expression\>
> leftSide=`true`


##### set result name for preprocessing file

###### //\#outname "some\.java"

#### //\#//
> leftSide=`true`


##### comment next line

###### //\#//<br/>line to be commented
> align=`left`


#### //\#definel \<var name\>
> leftSide=`true`


##### define a local boolean variable as TRUE

###### //\#definel newvar

#### //\#define \<var name\>
> leftSide=`true`


##### define a global boolean variable as TRUE

###### //\#define newglobal

#### //\#undef \<var name\>
> leftSide=`true`


##### remove variable if exists

###### //\#undef newvar

#### //\#flush
> leftSide=`true`


##### force flushing of current buffer states to disk<br/>and clear internal buffers

#### //\#include \<str expression\>
> leftSide=`true`


##### include preprocess result of defined file into position

###### //\#include "some\.java"

#### //\#action
> leftSide=`true`


##### make call to user extension<br/>with comma separated arguments

###### ??

#### //\#postfix\[\+|\-\]
> leftSide=`true`


##### turn on \(\+\) or turn off \(\-\) output into postfix section

###### some text<br/>//\#postfix\+<br/>it will be in the end<br/>//\#postfix\-<br/>other text
> align=`left`


#### //\#prefix\[\+|\-\]
> leftSide=`true`


##### turn on \(\+\) or turn off \(\-\) output into prefix section

###### some text<br/>//\#prefix\+<br/>it will be in the beginning<br/>//\#prefix\-<br/>other text
> align=`left`


#### //\#global \<var name\>=\<expression\>
> leftSide=`true`


##### define a global variable value

###### //\#global debug=true

#### //\#\_if\.\.//\#\_else\.\.//\#\_endif
> leftSide=`true`


##### special condition to be checked during 1st preprocessing pass<br/>works with global variables

###### //\#\_if debug<br/>\.\.\.<br/>//\#\_else<br/>\.\.\.<br/>//\#\_endif
> align=`left`


#### //\#excludeif \<bool expression\>
> leftSide=`true`


##### exclude file from preprocessing<br/>if boolean expression returns true

###### //\#excludeif debug

#### //\#error \<text\>
> leftSide=`true`


##### stop work and generate exception with notification<br/>macroses allowed

###### //\#error unexpected value /\*$var1$\*/

#### //\#warning \<text\>
> leftSide=`true`


##### log text as warning<br/>macroses allowed

###### //\#warning be careful with /\*$var4$\*/

#### //\#echo \<text\>
> leftSide=`true`


##### log text as info<br/>macroses allowed

###### //\#echo the line /\*$\_\_line\_\_$\*/

#### //\#msg \<text\>
> leftSide=`true`


##### log text as info<br/>macroses allowed, if verbose mode then stack will be printed

###### //\#msg some info

#### //\#noautoflush
> leftSide=`true`


##### turn off autoflush for EOF

#### //\#abort \<text\>
> leftSide=`true`


##### abort preprocessing and show message<br/>macroses allowed

###### //\#abort thats all\!

#### //$
> leftSide=`true`


##### remove comment and print result with macross processing

###### //$ some line with /\*$var$\*/

#### //$$
> leftSide=`true`


##### remove comment and print result, macroses ignored

###### //$$ some line with /\*$nonprocessed macroses$\*/

#### /\*\-\*/
> leftSide=`true`


##### drop tail of line

###### some line/\*\-\*/dropped part

### Data types
> leftSide=`true`


#### boolean

##### true

##### false
> leftSide=`true`


#### integer
> leftSide=`true`


##### signed 64 bit

###### 234567, 0x56FE

#### float
> leftSide=`true`


##### signed 32 bit

###### 0\.745

#### string
> leftSide=`true`


##### "hello world"

### Operators
> leftSide=`true`


#### ==, \>, \>=, \<, \<=, \!= 

#### \+,\-,\*,/,%
> leftSide=`true`


#### \!, &&, ||, ^
> leftSide=`true`


### Functions
> leftSide=`true`


#### INT|FLOAT abs\(INT|FLOAT\)

#### INT round\(INT|FLOAT\)
> leftSide=`true`


#### BOOL is\(STR,ANY\)
> leftSide=`true`


#### STR evalfile\(STR\)
> leftSide=`true`


#### STR binfile\(STR, STR\)
> leftSide=`true`


#### string processing

##### BOOL issubstr\(STR,STR\)

##### INT strlen\(STR\)

##### STR trimlines\(STR\)

##### STR esc\(STR\)

##### INT str2int\(STR\)

##### STR str2web\(STR\)

##### STR str2csv\(STR\)

##### STR str2js\(STR\)

##### STR str2json\(STR\)

##### STR str2xml\(STR\)

##### STR str2java\(STR\)

##### STR str2go\(STR\)

#### xml functions
> leftSide=`true`


##### STR xml\_get\(STR, INT\)

##### INT xml\_size\(STR\)
> leftSide=`true`


##### STR xml\_attr\(STR, STR\)
> leftSide=`true`


##### STR xml\_root\(STR\)
> leftSide=`true`


##### STR xml\_name\(STR\)
> leftSide=`true`


##### STR xml\_list\(STR, STR\)
> leftSide=`true`


##### STR xml\_text\(STR\)
> leftSide=`true`


##### STR xml\_open\(STR\)
> leftSide=`true`


##### STR xml\_xlist\(STR, STR\)
> leftSide=`true`


##### STR xml\_xelement\(STR, STR\)
> leftSide=`true`


### special variables
> leftSide=`true`


#### jcp\.version

##### preprocessor version

##### read only

#### jcp\.src\.path
> leftSide=`true`


##### full path to preprocessing source file

##### \_\_file\_\_

##### read only
> leftSide=`true`


#### jcp\.src\.dir
> leftSide=`true`


##### Preprocessing file folder

##### \_\_filefolder\_\_

##### read only

#### jcp\.src\.name
> leftSide=`true`


##### Preprocessing file name

##### \_\_filename\_\_

##### read only
> leftSide=`true`


#### \_\_line\_\_
> leftSide=`true`


##### number of preprocessing line

##### read only
> leftSide=`true`


#### jcp\.dst\.path
> leftSide=`true`


##### destination file path

##### read only
> leftSide=`true`


#### jcp\.dst\.dir
> leftSide=`true`


##### destination folder

#### jcp\.dst\.name
> leftSide=`true`


##### destination file name

#### \_\_time\_\_
> leftSide=`true`


##### current time<br/>HH:mm:ss

#### \_\_date\_\_
> leftSide=`true`


##### current date<br/>MMM dd yyyy

#### \_\_timestamp\_\_
> leftSide=`true`


##### source file timestamp<br/>EEE MMM dd HH:mm:ss yyyy
